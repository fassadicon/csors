<?php

namespace App\Filament\Resources;

use Filament\Forms;
use App\Models\Food;
use Filament\Tables;
use App\Models\Order;
use App\Models\Promo;
use App\Models\Package;
use App\Models\Utility;
use Filament\Forms\Get;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Illuminate\Support\HtmlString;
use Filament\Forms\Components\Wizard;
use Illuminate\Support\Facades\Blade;
use Filament\Tables\Actions\ActionGroup;
use Illuminate\Database\Eloquent\Builder;
use Filament\Forms\Components\MorphToSelect;
use Filament\Forms\Components\Actions\Action;
use App\Filament\Resources\OrderResource\Pages;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\OrderResource\RelationManagers;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationGroup = 'Orders';

    // See
    // https://laraveldaily.com/post/filament-repeater-live-calculations-on-update/

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Split::make([
                    Forms\Components\Section::make([
                        Forms\Components\Select::make('user_id')
                            ->preload()
                            ->relationship('user', 'name')
                            ->required(),
                        Forms\Components\Select::make('caterer_id')
                            ->preload()
                            ->relationship('caterer', 'name')
                            ->required(),
                        Forms\Components\DateTimePicker::make('start')
                            ->required(),
                        Forms\Components\DateTimePicker::make('end')
                            ->afterOrEqual('start')
                            ->required(),
                        Forms\Components\Textarea::make('remarks')
                            ->nullable()
                            ->columnSpanFull(),
                        Forms\Components\Select::make('promo_id')
                            ->preload()
                            ->relationship('promo', 'name')
                            ->nullable()
                            ->afterStateUpdated(function ($state, $get, $set) {
                                $promo = $state ? Promo::find($state) : null;
                                $deductedAmount = 0;
                                if ($promo->type == 'percentage') {
                                    $deductedAmount = $promo->value / 100 * $get('total_amount');
                                } else {
                                    $deductedAmount = $promo->value;
                                }
                                $set('deducted_amount', $deductedAmount);
                            }),
                        Forms\Components\TextInput::make('deducted_amount')
                            ->readOnly()
                            ->default(0)
                            ->prefix('₱')
                            ->numeric(),
                        // Forms\Components\TextInput::make('payment_id')
                        //     ->numeric(),
                        Forms\Components\TextInput::make('total_amount')
                            ->prefix('₱')
                            ->required()
                            ->numeric()
                            ->columnSpanFull()
                            ->live(),
                        // Get the sum from the order item repeater
                    ])
                        ->columns(2),
                    Forms\Components\Section::make([
                        Forms\Components\Repeater::make('orderItems')
                            ->columns([
                                'xl' => 2,
                            ])
                            ->label('Order List')
                            ->relationship('orderItems')
                            ->schema([
                                Forms\Components\MorphToSelect::make('orderable')
                                    ->label('Order Item')
                                    ->columnSpan(2)
                                    ->live()
                                    ->types([
                                        MorphToSelect\Type::make(Utility::class)
                                            ->getOptionLabelFromRecordUsing(fn(Utility $record): string => "$record->name - (₱$record->price/[pc/set])"),
                                        MorphToSelect\Type::make(Package::class)
                                            ->getOptionLabelFromRecordUsing(fn(Package $record): string => "$record->name - (₱$record->price/pax)"),
                                        MorphToSelect\Type::make(Food::class)
                                            ->getOptionLabelFromRecordUsing(fn(Food $record): string =>
                                            $record->foodDetail->name .  " - " . $record->servingType->name . " (₱" . $record->price . "/pax)"),
                                    ])
                                    ->afterStateUpdated(function ($state, $get, $set, $record) {
                                        dump($record);
                                        if ($get('orderable_id') != null) {
                                            $set('amount', $get('orderable_id'));
                                        }
                                    })
                                    ->required(),
                                Forms\Components\TextInput::make('quantity')
                                    ->live()
                                    ->default(25)
                                    ->required()
                                    ->afterStateUpdated(function ($state, $get, $set) {
                                        $set('amount', $get('orderable'));
                                    }),
                                Forms\Components\TextInput::make('amount')
                                    ->live()
                                    ->readOnly()
                                    ->required(),
                            ])
                            // ->disableOptionsWhenSelectedInSiblingRepeaterItems()
                            ->deleteAction(
                                fn(Action $action) => $action->requiresConfirmation(),
                            )
                    ])
                ])
                    ->columnSpanFull()

            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('user.name')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('orderItems')
                    ->size(Tables\Columns\TextColumn\TextColumnSize::ExtraSmall)
                    ->listWithLineBreaks()
                    ->bulleted()
                    ->limitList(2)
                    ->expandableLimitedList()
                    ->formatStateUsing(function ($state) {
                        $orderable_type = get_class($state->orderable);
                        if ($orderable_type === 'App\Models\Food') {
                            return $state->orderable->foodDetail->name . ' - ' . $state->orderable->servingType->name . ' (' . $state->quantity . ' pax) - ₱' . $state->amount;
                        }

                        return $state->orderable->name . ' (' . $state->quantity . ' set/pcs) - ₱' . $state->amount;
                    })
                    ->searchable(),
                Tables\Columns\TextColumn::make('start')
                    ->sortable()
                    ->dateTime('M j, Y g:i A'),
                Tables\Columns\TextColumn::make('end')
                    ->sortable()
                    ->dateTime('M j, Y g:i A'),
                Tables\Columns\TextColumn::make('caterer.name')
                    ->searchable()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('promo_id')
                    ->numeric()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('payment_id')
                    ->numeric()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('deducted_amount')
                    ->money('php')
                    ->numeric()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('total_amount')
                    ->label('Total')
                    ->numeric()
                    ->money('php')
                    ->sortable(),
                Tables\Columns\TextColumn::make('remarks')
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\ViewAction::make(),
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\DeleteAction::make(),
                    Tables\Actions\RestoreAction::make(),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListOrders::route('/'),
            'create' => Pages\CreateOrder::route('/create'),
            'view' => Pages\ViewOrder::route('/{record}'),
            'edit' => Pages\EditOrder::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
}
